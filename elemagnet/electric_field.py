# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/21_electric_charge_and_electric_field.ipynb.

# %% auto 0
__all__ = ['Vector', 'Particle', 'Proton', 'Neutron', 'Electron', 'Force', 'CoulombLaw', 'ElectricField']

# %% ../nbs/21_electric_charge_and_electric_field.ipynb 3
from typing import Any
from dataclasses import dataclass, field

import vector
from scipy.constants import epsilon_0, pi

# %% ../nbs/21_electric_charge_and_electric_field.ipynb 7
class Vector:
    def __init__(self, x, y, z = None):
        self.x = x
        self.y = y
        self.z = z
    
    @property
    def magnitude(self):
        if self.x and self.y and self.z:
            return vector.obj(x=self.x, y=self.y, z=self.z).mag
        elif self.x and self.y:
            return vector.obj(x=self.x, y=self.y).rho
        else:
            raise ValueError("Hell no")
    
    def add(self, other: vector):
        #return vector(x=self.x, y=self.y)
        pass

# %% ../nbs/21_electric_charge_and_electric_field.ipynb 18
class Particle:
    def __init__(
        self,
        electric_charge: int, # electric charge
        coordinate: vector, # coorindate
    ):
        self.electric_charge = electric_charge
        self.coordinate = coordinate
    
    @property
    def electric_charge(self):
        return self._electric_charge
    
    @electric_charge.setter
    def electric_charge(self, value):
        self._electric_charge = value

# %% ../nbs/21_electric_charge_and_electric_field.ipynb 20
@dataclass
class Particle:
    electric_charge: int
    coordinate: Vector
    
    def __post_init__(self):
        
        #self.electric_field = ElectricField()
        # if len(self.coordinate) == 3:
        #     self.coordinate = vector.obj(x=self.coordinate[0], y=self.coordinate[1], z=self.coordinate[2])
        # elif len(self.coordinate) == 2:
        #     self.coordinate = vector.obj(x=self.coordinate[0], y=self.coordinate[1])
        
        pass

# %% ../nbs/21_electric_charge_and_electric_field.ipynb 25
class Proton(Particle):
    pass

# %% ../nbs/21_electric_charge_and_electric_field.ipynb 26
class Neutron(Particle):
    pass

# %% ../nbs/21_electric_charge_and_electric_field.ipynb 27
class Electron(Particle):
    pass

# %% ../nbs/21_electric_charge_and_electric_field.ipynb 28
class Force:
    pass

# %% ../nbs/21_electric_charge_and_electric_field.ipynb 31
class CoulombLaw:
    
    def electric_force(self, q1: Particle, q2: Particle):
        pass

# %% ../nbs/21_electric_charge_and_electric_field.ipynb 35
class ElectricField(Particle):
    
    def magnitude(self, measure_coodrinate: Vector): # the coordinate of where the field is measured
        
        """"
        Calculate the magnitude of a point charge to where the field is measured
        """
        
        distance = self.coordinate.subtract(measure_coodrinate)
        distance_squared = distance.rho2
        unit_vector = distance.unit()
        
        print(f"electric_field = {self.electric_charge}")
        
        return (1/(4*pi*epsilon_0)) * (self.electric_charge / distance_squared) * unit_vector
